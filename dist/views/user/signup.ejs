<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Registration</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }
    
    :root {
      --primary: #6c5ce7;
      --primary-light: #a29bfe;
      --secondary: #00cec9;
      --accent: #fd79a8;
      --dark: #2d3436;
      --light: #dfe6e9;
      --success: #00b894;
      --error: #d63031;
      --gradient: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    }
    
    body {
      background: linear-gradient(135deg, #c8d6e5 0%, #dfe6e9 100%);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 20px;
      overflow-x: hidden;
    }
    
    .signup-container {
      background-color: white;
      border-radius: 20px;
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1), 
                  0 5px 15px rgba(0, 0, 0, 0.05);
      width: 100%;
      max-width: 500px;
      padding: 30px;
      transform: translateY(20px);
      opacity: 0;
      animation: fadeInUp 0.8s forwards;
    }
    
    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .form-header {
      background: var(--gradient);
      margin: -30px -30px 25px -30px;
      padding: 25px 30px;
      border-radius: 20px 20px 0 0;
      position: relative;
      overflow: hidden;
    }
    
    .form-header::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(255,255,255,0.2) 0%, transparent 60%);
      animation: shimmer 5s infinite linear;
    }
    
    @keyframes shimmer {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    .form-header h2 {
      color: white;
      margin-bottom: 0;
      position: relative;
      z-index: 1;
      text-shadow: 0 2px 4px rgba(0,0,0,0.1);
      font-weight: 600;
    }
    
    h2 {
      color: var(--dark);
      text-align: center;
      margin-bottom: 25px;
      font-size: 28px;
      position: relative;
    }
    
    h2:after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 50px;
      height: 3px;
      background: var(--gradient);
      border-radius: 3px;
    }
    
    form {
      display: flex;
      flex-direction: column;
    }
    
    input, select {
      padding: 14px 18px;
      margin-bottom: 5px;
      border: 2px solid var(--light);
      border-radius: 12px;
      font-size: 16px;
      transition: all 0.3s ease;
      background-color: #f9f9f9;
      color: var(--dark);
      box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
      opacity: 0;
      transform: translateX(-10px);
      animation: slideIn 0.5s forwards;
    }
    
    @keyframes slideIn {
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    input:nth-child(1) { animation-delay: 0.1s; }
    input:nth-child(3) { animation-delay: 0.2s; }
    input:nth-child(5) { animation-delay: 0.3s; }
    input:nth-child(7) { animation-delay: 0.4s; }
    select:nth-child(9) { animation-delay: 0.5s; }
    select:nth-child(11) { animation-delay: 0.6s; }
    input:nth-child(13) { animation-delay: 0.7s; }
    input:nth-child(15) { animation-delay: 0.8s; }
    input:nth-child(17) { animation-delay: 0.9s; }
    
    input:focus, select:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(108, 92, 231, 0.2);
      transform: scale(1.02);
    }
    
    input::placeholder, select::placeholder {
      color: #b2bec3;
      transition: all 0.3s ease;
    }
    
    input:focus::placeholder {
      opacity: 0.5;
      transform: translateX(5px);
    }
    
    .error {
      color: var(--error);
      font-size: 14px;
      margin-bottom: 15px;
      min-height: 20px;
      font-weight: 500;
      transform: translateY(-5px);
      opacity: 0;
      transition: all 0.3s ease;
    }
    
    .error:not(:empty) {
      transform: translateY(0);
      opacity: 1;
      animation: shake 0.5s;
    }
    
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      20%, 60% { transform: translateX(-5px); }
      40%, 80% { transform: translateX(5px); }
    }
    
    button {
      background: var(--gradient);
      color: white;
      border: none;
      border-radius: 12px;
      padding: 14px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 15px;
      box-shadow: 0 5px 15px rgba(108, 92, 231, 0.3);
      position: relative;
      overflow: hidden;
      animation: fadeIn 1s 1s forwards;
      opacity: 0;
      letter-spacing: 0.5px;
    }
    
    @keyframes fadeIn {
      to { opacity: 1; }
    }
    
    button:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(108, 92, 231, 0.4);
    }
    
    button:active {
      transform: translateY(0);
      box-shadow: 0 3px 10px rgba(108, 92, 231, 0.3);
    }
    
    button::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 5px;
      height: 5px;
      background: rgba(255, 255, 255, 0.5);
      opacity: 0;
      border-radius: 100%;
      transform: scale(1, 1) translate(-50%);
      transform-origin: 50% 50%;
    }
    
    button:focus:not(:active)::after {
      animation: ripple 1s ease-out;
    }
    
    @keyframes ripple {
      0% {
        transform: scale(0, 0);
        opacity: 0.5;
      }
      100% {
        transform: scale(20, 20);
        opacity: 0;
      }
    }
    
    .form-group {
      margin-bottom: 5px;
      position: relative;
    }
    
    .form-footer {
      text-align: center;
      margin-top: 25px;
      color: var(--dark);
      font-size: 14px;
      opacity: 0;
      animation: fadeIn 0.5s 1.2s forwards;
    }
    
    .form-footer a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .form-footer a:hover {
      color: var(--secondary);
      text-decoration: underline;
    }
    
    /* Floating labels animation */
    .input-container {
      position: relative;
      margin-bottom: 20px;
    }
    
    .input-container label {
      position: absolute;
      top: 0;
      left: 0;
      font-size: 16px;
      color: #999;
      pointer-events: none;
      transition: all 0.3s ease;
    }
    
    /* Responsive design */
    @media (max-width: 600px) {
      .signup-container {
        padding: 20px;
      }
      
      .form-header {
        margin: -20px -20px 20px -20px;
        padding: 20px;
      }
      
      input, select, button {
        padding: 12px;
        font-size: 14px;
      }
    }
    
    /* Custom select styling */
    select {
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%236c5ce7' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 15px center;
      background-size: 15px;
      padding-right: 40px;
    }
    
    /* Date input styling */
    input[type="date"]::-webkit-calendar-picker-indicator {
      filter: invert(0.5) sepia(1) saturate(5) hue-rotate(175deg);
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="signup-container">
    <div class="form-header">
      <h2>Student Registration</h2>
    </div>
    
    <form id="signupForm" action="/signup" method="POST" onsubmit="return handleSignup(event)">
      <input type="text" id="name" name="name" placeholder="Full Name" />
      <div id="nameError" class="error"></div>
     
      
      <input type="email" id="email" name="email" placeholder="Email Address" />
      <div id="emailError" class="error"></div>
      
      <input type="text" id="phone" name="phone" placeholder="Phone Number" />
      <div id="phoneError" class="error"></div>
      
      
      <input type="password" id="password" name="password" placeholder="Password" />
      <div id="passwordError" class="error"></div>
      
      <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm Password" />
      <div id="confirmPasswordError" class="error"></div>
      
      <button type="submit">Register</button>
    </form>
    
    <div class="form-footer">
      Already have an account? <a href="/login">Login here</a>
    </div>
  </div>

  <script>
    async function handleSignup(event) {
      event.preventDefault();
  
      const isValid = validateForm(); // This handles client-side validation
      if (!isValid) return false;
  
      // Gather form values
      const name = document.getElementById('name').value.trim();
      const email = document.getElementById('email').value.trim();
      const phone = document.getElementById('phone').value.trim();
      const password = document.getElementById('password').value.trim();
  
      // Clear server-side error messages
      document.getElementById('emailError').textContent = '';
  
      try {
        const response = await fetch('/signup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name, email, phone, password })
        });
  
        const data = await response.json();
  
        if (data.success) {
          window.location.href = "/"; 
        } else {
          // Display backend error under email field
          if (data.message.toLowerCase().includes("email")) {
            document.getElementById('emailError').textContent = data.message;
          } else {
            alert(data.message || "Signup failed.");
          }
  
          const button = document.querySelector('button[type="submit"]');
          button.innerHTML = 'Register'; // reset button
          button.style.background = '';
          button.style.transform = '';
        }
      } catch (error) {
        console.error("Signup error:", error);
        alert("Something went wrong. Please try again later.");
      }
  
      return false;
    }
  </script>
  

  <script>
    // Add animation class to each input with delay
    document.addEventListener('DOMContentLoaded', function() {
      const inputs = document.querySelectorAll('input, select');
      inputs.forEach((input, index) => {
        setTimeout(() => {
          input.style.animation = `slideIn 0.5s forwards`;
        }, 100 * index);
      });
    });
    
    function validateForm() {
      let isValid = true;
      
      // Clear previous errors
      const errorElements = document.querySelectorAll('.error');
      errorElements.forEach(element => {
        element.textContent = '';
      });
      
      // Validate name
      const name = document.getElementById('name').value.trim();
      if (name === '') {
        document.getElementById('nameError').textContent = 'Name is required';
        isValid = false;
      }
   
      
      // Validate email
      const email = document.getElementById('email').value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (email === '') {
        document.getElementById('emailError').textContent = 'Email is required';
        isValid = false;
      } else if (!emailRegex.test(email)) {
        document.getElementById('emailError').textContent = 'Please enter a valid email address';
        isValid = false;
      }
      
      // Validate phone
      const phone = document.getElementById('phone').value.trim();
      const phoneRegex = /^\d{10}$/;
      if (phone === '') {
        document.getElementById('phoneError').textContent = 'Phone number is required';
        isValid = false;
      } else if (!phoneRegex.test(phone)) {
        document.getElementById('phoneError').textContent = 'Please enter a valid 10-digit phone number';
        isValid = false;
      }
      
      // Validate password
      const password = document.getElementById('password').value;
      if (password === '') {
        document.getElementById('passwordError').textContent = 'Password is required';
        isValid = false;
      } else if (password.length < 8) {
        document.getElementById('passwordError').textContent = 'Password must be at least 8 characters long';
        isValid = false;
      }
      
      // Validate confirm password
      const confirmPassword = document.getElementById('confirmPassword').value;
      if (confirmPassword === '') {
        document.getElementById('confirmPasswordError').textContent = 'Please confirm your password';
        isValid = false;
      } else if (confirmPassword !== password) {
        document.getElementById('confirmPasswordError').textContent = 'Passwords do not match';
        isValid = false;
      }
      
      // Add animation to button on submit
      if (isValid) {
        const button = document.querySelector('button[type="submit"]');
        button.innerHTML = 'Processing...';
        button.style.background = 'var(--success)';
        button.style.transform = 'scale(1.05)';
      }
      
      return isValid;

      
    }
    
    // Add focus and blur effects to inputs
    const inputs = document.querySelectorAll('input, select');
    inputs.forEach(input => {
      input.addEventListener('focus', function() {
        this.style.transform = 'scale(1.02)';
        this.style.borderColor = 'var(--primary)';
        this.style.boxShadow = '0 0 0 3px rgba(108, 92, 231, 0.2)';
      });
      
      input.addEventListener('blur', function() {
        this.style.transform = 'scale(1)';
        if (!this.value) {
          this.style.borderColor = 'var(--light)';
          this.style.boxShadow = 'inset 0 1px 3px rgba(0,0,0,0.05)';
        }
      });
    });
  </script>
</body>
</html>